package zzh.com.haostore.cart.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import zzh.com.haostore.cart.beans.CartBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CART_BEAN".
*/
public class CartBeanDao extends AbstractDao<CartBean, Long> {

    public static final String TABLENAME = "CART_BEAN";

    /**
     * Properties of entity CartBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CartID = new Property(0, long.class, "cartID", true, "_id");
        public final static Property Product_id = new Property(1, String.class, "product_id", false, "PRODUCT_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Price = new Property(3, String.class, "price", false, "PRICE");
        public final static Property ImgURL = new Property(4, String.class, "imgURL", false, "IMG_URL");
        public final static Property Num = new Property(5, int.class, "num", false, "NUM");
        public final static Property IsCheck = new Property(6, boolean.class, "isCheck", false, "IS_CHECK");
    }


    public CartBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CartBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CART_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: cartID
                "\"PRODUCT_ID\" TEXT," + // 1: product_id
                "\"NAME\" TEXT," + // 2: name
                "\"PRICE\" TEXT," + // 3: price
                "\"IMG_URL\" TEXT," + // 4: imgURL
                "\"NUM\" INTEGER NOT NULL ," + // 5: num
                "\"IS_CHECK\" INTEGER NOT NULL );"); // 6: isCheck
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CART_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CartBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCartID());
 
        String product_id = entity.getProduct_id();
        if (product_id != null) {
            stmt.bindString(2, product_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(4, price);
        }
 
        String imgURL = entity.getImgURL();
        if (imgURL != null) {
            stmt.bindString(5, imgURL);
        }
        stmt.bindLong(6, entity.getNum());
        stmt.bindLong(7, entity.getIsCheck() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CartBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCartID());
 
        String product_id = entity.getProduct_id();
        if (product_id != null) {
            stmt.bindString(2, product_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(4, price);
        }
 
        String imgURL = entity.getImgURL();
        if (imgURL != null) {
            stmt.bindString(5, imgURL);
        }
        stmt.bindLong(6, entity.getNum());
        stmt.bindLong(7, entity.getIsCheck() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public CartBean readEntity(Cursor cursor, int offset) {
        CartBean entity = new CartBean( //
            cursor.getLong(offset + 0), // cartID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // product_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // price
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // imgURL
            cursor.getInt(offset + 5), // num
            cursor.getShort(offset + 6) != 0 // isCheck
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CartBean entity, int offset) {
        entity.setCartID(cursor.getLong(offset + 0));
        entity.setProduct_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPrice(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImgURL(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNum(cursor.getInt(offset + 5));
        entity.setIsCheck(cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CartBean entity, long rowId) {
        entity.setCartID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CartBean entity) {
        if(entity != null) {
            return entity.getCartID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CartBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
